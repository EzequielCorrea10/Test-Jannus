//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TEST.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    
    public partial class TestEntities1 : DbContext
    {
        public TestEntities1()
            : base("name=TestEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
    
        public virtual int sp_DeleteProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProduct", idParameter);
        }
    
        public virtual ObjectResult<sp_GetProducts_Result> sp_GetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProducts_Result>("sp_GetProducts");
        }
    
        public virtual ObjectResult<sp_GetProductTypes_Result> sp_GetProductTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductTypes_Result>("sp_GetProductTypes");
        }
    
        public virtual int sp_InsertProduct(string name, Nullable<decimal> price, Nullable<int> productTypeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProduct", nameParameter, priceParameter, productTypeIdParameter);
        }
    
        public virtual int sp_InsertProductType(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProductType", descriptionParameter);
        }
    
        public virtual int sp_ModifyProduct(Nullable<int> id, string newName, Nullable<decimal> newPrice, Nullable<int> newTypeId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            var newTypeIdParameter = newTypeId.HasValue ?
                new ObjectParameter("NewTypeId", newTypeId) :
                new ObjectParameter("NewTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModifyProduct", idParameter, newNameParameter, newPriceParameter, newTypeIdParameter);
        }
    }
}
